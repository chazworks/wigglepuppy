<?php
/**
 * This file was generated by Jetbrains Junie
 */

declare(strict_types=1);

use Rector\Config\RectorConfig;
use Rector\Set\ValueObject\SetList;
use Rector\ValueObject\PhpVersion;

return function (RectorConfig $rectorConfig): void {
    // Define paths to refactor
    $rectorConfig->paths([
        __DIR__ . '/src'
    ]);

    // Skip certain paths
    $rectorConfig->skip([
        __DIR__ . '/src/wp-includes/ID3',
        __DIR__ . '/src/wp-includes/IXR',
        __DIR__ . '/src/wp-includes/PHPMailer',
        __DIR__ . '/src/wp-includes/Requests',
        __DIR__ . '/src/wp-includes/SimplePie',
        __DIR__ . '/src/wp-includes/sodium_compat',
        __DIR__ . '/src/wp-includes/Text',
        // Add other third-party libraries to skip
    ]);

    // Set PHP version - We can target PHP 8.4+ for internal implementation
    // while maintaining API compatibility for plugins and themes
    $rectorConfig->phpVersion(PhpVersion::PHP_84);

    // Apply rules by risk level
    $rectorConfig->rules(getLowRiskRules());

    // Uncomment to apply medium risk rules
    // $rectorConfig->rules(getMediumRiskRules());

    // Uncomment to apply high risk rules
    // $rectorConfig->rules(getHighRiskRules());
};

/**
 * Low risk rules that can be safely applied to the entire codebase.
 * These rules improve code readability and maintainability without changing behavior.
 */
function getLowRiskRules(): array
{
    return [
        // Code Quality Improvements
        \Rector\CodeQuality\Rector\Isset_\IssetOnPropertyObjectToPropertyExistsRector::class,
        \Rector\CodeQuality\Rector\FuncCall\SimplifyRegexPatternRector::class,
        \Rector\CodeQuality\Rector\Ternary\UnnecessaryTernaryExpressionRector::class,
        \Rector\CodeQuality\Rector\If_\SimplifyIfReturnBoolRector::class,
        \Rector\CodeQuality\Rector\Concat\JoinStringConcatRector::class,
        \Rector\CodeQuality\Rector\FunctionLike\SimplifyUselessVariableRector::class,
        \Rector\CodeQuality\Rector\BooleanNot\SimplifyDeMorganBinaryRector::class,
        \Rector\CodeQuality\Rector\If_\ConsecutiveNullCompareReturnsToNullCoalesceQueueRector::class,

        // Dead Code Elimination
        \Rector\DeadCode\Rector\ClassMethod\RemoveEmptyClassMethodRector::class,
        \Rector\DeadCode\Rector\Property\RemoveUnusedPrivatePropertyRector::class,
        \Rector\DeadCode\Rector\ClassConst\RemoveUnusedPrivateConstantRector::class,
        \Rector\DeadCode\Rector\StmtsAwareInterface\RemoveJustVariableAssignRector::class,
        \Rector\DeadCode\Rector\If_\RemoveUnusedNonEmptyArrayBeforeForeachRector::class,
        \Rector\DeadCode\Rector\ClassMethod\RemoveUnusedConstructorParamRector::class,
        \Rector\DeadCode\Rector\ClassMethod\RemoveUnusedPrivateMethodRector::class,
        \Rector\DeadCode\Rector\Assign\RemoveUnusedVariableAssignRector::class,

        // Coding Style Improvements
        \Rector\CodingStyle\Rector\ClassConst\VarConstantCommentRector::class,
        \Rector\CodingStyle\Rector\FuncCall\ConsistentImplodeRector::class,
        \Rector\CodingStyle\Rector\Encapsed\EncapsedStringsToSprintfRector::class,
        \Rector\CodingStyle\Rector\Stmt\NewlineAfterStatementRector::class,
        \Rector\CodingStyle\Rector\String_\SymplifyQuoteEscapeRector::class,
        \Rector\CodingStyle\Rector\ClassMethod\UnSpreadOperatorRector::class,
        \Rector\CodingStyle\Rector\FuncCall\CountArrayToEmptyArrayComparisonRector::class,
        \Rector\CodingStyle\Rector\Ternary\TernaryConditionVariableAssignmentRector::class,
    ];
}

/**
 * Medium risk rules that should be applied carefully.
 * These can be safely applied to internal implementation code, but may need caution for public APIs.
 */
function getMediumRiskRules(): array
{
    return [
        // Internal Implementation Syntax Upgrades
        \Rector\Php71\Rector\FuncCall\CountOnNullRector::class,
        \Rector\Php73\Rector\FuncCall\JsonThrowOnErrorRector::class,
        \Rector\Php74\Rector\Property\TypedPropertyRector::class,
        \Rector\Php80\Rector\Class_\StringableInterfaceRector::class,
        \Rector\Php81\Rector\Property\ReadOnlyPropertyRector::class,
        \Rector\Php82\Rector\Class_\ReadOnlyClassRector::class,
        \Rector\Php80\Rector\FunctionLike\UnionTypesRector::class,
        \Rector\Php81\Rector\FunctionLike\IntersectionTypesRector::class,

        // Type Declaration Improvements
        \Rector\TypeDeclaration\Rector\ClassMethod\AddReturnTypeDeclarationRector::class,
        \Rector\TypeDeclaration\Rector\Property\PropertyTypeDeclarationRector::class,
        \Rector\TypeDeclaration\Rector\FunctionLike\ParamTypeDeclarationRector::class,
        \Rector\TypeDeclaration\Rector\Property\AddPropertyTypeDeclarationRector::class,
        \Rector\TypeDeclaration\Rector\ClassMethod\ReturnTypeFromStrictTypedCallRector::class,
        \Rector\TypeDeclaration\Rector\ClassMethod\ReturnTypeFromStrictNativeCallRector::class,
        \Rector\TypeDeclaration\Rector\Closure\AddClosureReturnTypeRector::class,
        \Rector\TypeDeclaration\Rector\Property\TypedPropertyFromStrictConstructorRector::class,

        // Naming Convention Standardization
        \Rector\Naming\Rector\Class_\RenamePropertyToMatchTypeRector::class,
        \Rector\Naming\Rector\ClassMethod\RenameVariableToMatchMethodCallReturnTypeRector::class,
        \Rector\Naming\Rector\Foreach_\RenameForeachValueVariableToMatchMethodCallReturnTypeRector::class,
        \Rector\Naming\Rector\ClassMethod\RenameParamToMatchTypeRector::class,
        \Rector\Naming\Rector\Assign\RenameVariableToMatchMethodCallReturnTypeRector::class,
        \Rector\Naming\Rector\Variable\UnderscoreToCamelCaseVariableNameRector::class,
        \Rector\Naming\Rector\Property\UnderscoreToCamelCasePropertyNameRector::class,
        \Rector\Naming\Rector\Class_\RenamePropertyToMatchTypeRector::class,
    ];
}

/**
 * High risk rules that should be applied with extreme caution.
 * These should only be applied after thorough analysis of the impact on the public API.
 */
function getHighRiskRules(): array
{
    return [
        // Public API Class Structure Changes
        \Rector\Privatization\Rector\Property\PrivatizeLocalPropertyToPrivatePropertyRector::class,
        \Rector\Privatization\Rector\MethodCall\PrivatizeLocalGetterToPropertyRector::class,
        \Rector\Privatization\Rector\Property\PrivatizeFinalClassPropertyRector::class,
        \Rector\Privatization\Rector\Class_\FinalizeClassesWithoutChildrenRector::class,
        \Rector\Privatization\Rector\ClassMethod\PrivatizeFinalClassMethodRector::class,
        \Rector\Privatization\Rector\Property\ChangeReadOnlyPropertyWithDefaultValueToConstantRector::class,
        \Rector\Privatization\Rector\Class_\RepeatedLiteralToClassConstantRector::class,
        \Rector\Privatization\Rector\ClassMethod\PrivatizeLocalOnlyMethodRector::class,

        // Public API Method Signature Changes
        \Rector\TypeDeclaration\Rector\ClassMethod\AddMethodParamTypeDeclarationRector::class,
        \Rector\TypeDeclaration\Rector\ClassMethod\AddParamTypeDeclarationRector::class,
        \Rector\TypeDeclaration\Rector\Param\ParamTypeFromStrictTypedPropertyRector::class,
        \Rector\TypeDeclaration\Rector\FunctionLike\AddParamTypeSplFixedArrayRector::class,
        \Rector\TypeDeclaration\Rector\ClassMethod\AddArrayParamDocTypeRector::class,
        \Rector\TypeDeclaration\Rector\ClassMethod\AddArrayReturnDocTypeRector::class,
        \Rector\TypeDeclaration\Rector\ClassMethod\ParamTypeByMethodCallTypeRector::class,
        \Rector\TypeDeclaration\Rector\ClassMethod\ReturnTypeFromReturnNewRector::class,

        // Architecture Refactoring
        \Rector\Architecture\Rector\ClassMethod\MoveUpMethodRector::class,
        \Rector\Architecture\Rector\Class_\MoveRepositoryFromParentToConstructorRector::class,
        \Rector\Architecture\Rector\Class_\DesiredClassTypeToDynamicReturnTypeRector::class,
        \Rector\Architecture\Rector\MethodCall\MethodCallToAnotherMethodCallWithArgumentsRector::class,
        \Rector\Architecture\Rector\ClassMethod\MergeChildClassMethodToParentClassMethodRector::class,
        \Rector\Architecture\Rector\Class_\MovePrivateClassMethodToParentClassRector::class,
        \Rector\Architecture\Rector\Class_\InjectParentConstructorDependencyRector::class,
        \Rector\Architecture\Rector\Class_\MoveEnumToEnumClassRector::class,
    ];
}
